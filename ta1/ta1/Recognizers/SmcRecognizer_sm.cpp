//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : SmcRecognizer.sm
//

#include "SmcRecognizer.h"
#include "SmcRecognizer_sm.h"

using namespace statemap;

// Static class declarations.
map1_Start map1::Start("map1::Start", 0);
map1_CommandName map1::CommandName("map1::CommandName", 1);
map1_ModifierList map1::ModifierList("map1::ModifierList", 2);
map1_SingleDash map1::SingleDash("map1::SingleDash", 3);
map1_DoubleDash map1::DoubleDash("map1::DoubleDash", 4);
map1_Error map1::Error("map1::Error", 5);
map1_OK map1::OK("map1::OK", 6);

void SmcRecognizerState::CommandChar(SmcRecognizerContext& context, char c)
{
    Default(context);
}

void SmcRecognizerState::Dash(SmcRecognizerContext& context)
{
    Default(context);
}

void SmcRecognizerState::EOS(SmcRecognizerContext& context)
{
    Default(context);
}

void SmcRecognizerState::Key(SmcRecognizerContext& context, char c)
{
    Default(context);
}

void SmcRecognizerState::Space(SmcRecognizerContext& context)
{
    Default(context);
}

void SmcRecognizerState::Default(SmcRecognizerContext& context)
{
    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void map1_Start::CommandChar(SmcRecognizerContext& context, char c)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.add_to_command_name(c);
        context.setState(map1::CommandName);
    }
    catch (...)
    {
        context.setState(map1::CommandName);
        throw;
    }
    context.getState().Entry(context);


}

void map1_Start::Default(SmcRecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(map1::Error);
    context.getState().Entry(context);


}

void map1_Start::EOS(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.process_command();
        context.setState(map1::Error);
    }
    catch (...)
    {
        context.setState(map1::Error);
        throw;
    }
    context.getState().Entry(context);


}

void map1_CommandName::CommandChar(SmcRecognizerContext& context, char c)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.add_to_command_name(c);
        context.setState(map1::CommandName);
    }
    catch (...)
    {
        context.setState(map1::CommandName);
        throw;
    }
    context.getState().Entry(context);


}

void map1_CommandName::EOS(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.process_command();
        context.setState(map1::OK);
    }
    catch (...)
    {
        context.setState(map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void map1_CommandName::Space(SmcRecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(map1::ModifierList);
    context.getState().Entry(context);


}

void map1_ModifierList::Dash(SmcRecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(map1::SingleDash);
    context.getState().Entry(context);


}

void map1_ModifierList::EOS(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.process_command();
        context.setState(map1::OK);
    }
    catch (...)
    {
        context.setState(map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void map1_ModifierList::Space(SmcRecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(map1::ModifierList);
    context.getState().Entry(context);


}

void map1_SingleDash::Dash(SmcRecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(map1::DoubleDash);
    context.getState().Entry(context);


}

void map1_SingleDash::Default(SmcRecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(map1::Error);
    context.getState().Entry(context);


}

void map1_SingleDash::EOS(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.process_command();
        context.setState(map1::OK);
    }
    catch (...)
    {
        context.setState(map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void map1_SingleDash::Key(SmcRecognizerContext& context, char c)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.add_single_modifier(c);
        context.setState(map1::ModifierList);
    }
    catch (...)
    {
        context.setState(map1::ModifierList);
        throw;
    }
    context.getState().Entry(context);


}

void map1_SingleDash::Space(SmcRecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(map1::ModifierList);
    context.getState().Entry(context);


}

void map1_DoubleDash::Default(SmcRecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(map1::Error);
    context.getState().Entry(context);


}

void map1_DoubleDash::EOS(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.process_command();
        context.setState(map1::OK);
    }
    catch (...)
    {
        context.setState(map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void map1_DoubleDash::Key(SmcRecognizerContext& context, char c)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.add_multi_modifier(c);
        context.setState(map1::DoubleDash);
    }
    catch (...)
    {
        context.setState(map1::DoubleDash);
        throw;
    }
    context.getState().Entry(context);


}

void map1_DoubleDash::Space(SmcRecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(map1::ModifierList);
    context.getState().Entry(context);


}

void map1_Error::Default(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.reset();
        context.setState(map1::Start);
    }
    catch (...)
    {
        context.setState(map1::Start);
        throw;
    }
    context.getState().Entry(context);


}

void map1_OK::Default(SmcRecognizerContext& context)
{

    context.getState().Exit(context);
    context.setState(map1::OK);
    context.getState().Entry(context);


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
