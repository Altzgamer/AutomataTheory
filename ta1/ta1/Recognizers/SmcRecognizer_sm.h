//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : SmcRecognizer.sm
//

#ifndef SMCRECOGNIZER_SM_H
#define SMCRECOGNIZER_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"

// Forward declarations.
class map1;
class map1_Start;
class map1_CommandName;
class map1_ModifierList;
class map1_SingleDash;
class map1_DoubleDash;
class map1_Error;
class map1_OK;
class map1_Default;
class SmcRecognizerState;
class SmcRecognizerContext;
class SmcRecognizer;

class SmcRecognizerState :
    public statemap::State
{
public:

    SmcRecognizerState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(SmcRecognizerContext&) {};
    virtual void Exit(SmcRecognizerContext&) {};

    virtual void CommandChar(SmcRecognizerContext& context, char c);
    virtual void Dash(SmcRecognizerContext& context);
    virtual void EOS(SmcRecognizerContext& context);
    virtual void Key(SmcRecognizerContext& context, char c);
    virtual void Space(SmcRecognizerContext& context);

protected:

    virtual void Default(SmcRecognizerContext& context);
};

class map1
{
public:

    static map1_Start Start;
    static map1_CommandName CommandName;
    static map1_ModifierList ModifierList;
    static map1_SingleDash SingleDash;
    static map1_DoubleDash DoubleDash;
    static map1_Error Error;
    static map1_OK OK;
};

class map1_Default :
    public SmcRecognizerState
{
public:

    map1_Default(const char * const name, const int stateId)
    : SmcRecognizerState(name, stateId)
    {};

};

class map1_Start :
    public map1_Default
{
public:
    map1_Start(const char * const name, const int stateId)
    : map1_Default(name, stateId)
    {};

    virtual void CommandChar(SmcRecognizerContext& context, char c);
    virtual void Default(SmcRecognizerContext& context);
    virtual void EOS(SmcRecognizerContext& context);
};

class map1_CommandName :
    public map1_Default
{
public:
    map1_CommandName(const char * const name, const int stateId)
    : map1_Default(name, stateId)
    {};

    virtual void CommandChar(SmcRecognizerContext& context, char c);
    virtual void EOS(SmcRecognizerContext& context);
    virtual void Space(SmcRecognizerContext& context);
};

class map1_ModifierList :
    public map1_Default
{
public:
    map1_ModifierList(const char * const name, const int stateId)
    : map1_Default(name, stateId)
    {};

    virtual void Dash(SmcRecognizerContext& context);
    virtual void EOS(SmcRecognizerContext& context);
    virtual void Space(SmcRecognizerContext& context);
};

class map1_SingleDash :
    public map1_Default
{
public:
    map1_SingleDash(const char * const name, const int stateId)
    : map1_Default(name, stateId)
    {};

    virtual void Dash(SmcRecognizerContext& context);
    virtual void Default(SmcRecognizerContext& context);
    virtual void EOS(SmcRecognizerContext& context);
    virtual void Key(SmcRecognizerContext& context, char c);
    virtual void Space(SmcRecognizerContext& context);
};

class map1_DoubleDash :
    public map1_Default
{
public:
    map1_DoubleDash(const char * const name, const int stateId)
    : map1_Default(name, stateId)
    {};

    virtual void Default(SmcRecognizerContext& context);
    virtual void EOS(SmcRecognizerContext& context);
    virtual void Key(SmcRecognizerContext& context, char c);
    virtual void Space(SmcRecognizerContext& context);
};

class map1_Error :
    public map1_Default
{
public:
    map1_Error(const char * const name, const int stateId)
    : map1_Default(name, stateId)
    {};

    virtual void Default(SmcRecognizerContext& context);
};

class map1_OK :
    public map1_Default
{
public:
    map1_OK(const char * const name, const int stateId)
    : map1_Default(name, stateId)
    {};

    virtual void Default(SmcRecognizerContext& context);
};

class SmcRecognizerContext :
    public statemap::FSMContext
{
public:

    explicit SmcRecognizerContext(SmcRecognizer& owner)
    : FSMContext(map1::Start),
      _owner(owner)
    {};

    SmcRecognizerContext(SmcRecognizer& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline SmcRecognizer& getOwner()
    {
        return (_owner);
    };

    inline SmcRecognizerState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<SmcRecognizerState&>(*_state);
    };

    inline void CommandChar(char c)
    {
        getState().CommandChar(*this, c);
    };

    inline void Dash()
    {
        getState().Dash(*this);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void Key(char c)
    {
        getState().Key(*this, c);
    };

    inline void Space()
    {
        getState().Space(*this);
    };

private:
    SmcRecognizer& _owner;
};


#endif // SMCRECOGNIZER_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
